package android.coding.ourapp.adapterimport android.coding.ourapp.data.datasource.model.Studentimport android.coding.ourapp.databinding.ListItemStudentBindingimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewclass StudentAdapter(private val onDeleteClick: (Student) -> Unit) :    RecyclerView.Adapter<StudentAdapter.StudentViewHolder>() {    private var listStudent: List<Student> = emptyList()    class StudentViewHolder(val binding: ListItemStudentBinding) : RecyclerView.ViewHolder(binding.root)    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): StudentViewHolder {        return StudentViewHolder(            ListItemStudentBinding.inflate(                LayoutInflater.from(parent.context),                parent,                false            )        )    }    override fun onBindViewHolder(holder: StudentViewHolder, position: Int) {        holder.binding.apply {            btnDelete.setOnClickListener {                onDeleteClick.invoke(listStudent[position])            }            tvTittle.text = listStudent[position].nameStudent            tvCompany.text = listStudent[position].company            tvGroup.text = listStudent[position].group        }    }    override fun getItemCount(): Int = listStudent.size    fun updateData(newDataList: List<Student>) {        val diffCallback = DataDiffCallback(listStudent, newDataList)        val diffResult = DiffUtil.calculateDiff(diffCallback)        listStudent = newDataList.reversed()        diffResult.dispatchUpdatesTo(this)    }    class DataDiffCallback(        private val oldList: List<Student>,        private val newList: List<Student>    ) : DiffUtil.Callback() {        override fun getOldListSize(): Int = oldList.size        override fun getNewListSize(): Int = newList.size        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {            val oldItem = oldList[oldItemPosition]            val newItem = newList[newItemPosition]            return oldItem.id == newItem.id        }        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {            val oldItem = oldList[oldItemPosition]            val newItem = newList[newItemPosition]            return oldItem == newItem        }    }}